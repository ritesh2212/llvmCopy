//=====-- Cpu0Subtarget.h - Define Subtarget for the Cpu0 -----*- C++ -*--==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the Cpu0 specific subclass of TargetSubtarget.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_CPU0_CPU0SUBTARGET_H
#define LLVM_LIB_TARGET_CPU0_CPU0SUBTARGET_H

#include "Cpu0FrameLowering.h"
//#include "Cpu0ISelLowering.h"
#include "Cpu0InstrInfo.h"
//#include "Cpu0SelectionDAGInfo.h"
#include "llvm/CodeGen/TargetFrameLowering.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "Cpu0GenSubtargetInfo.inc"

namespace llvm {

class Cpu0Subtarget : public Cpu0GenSubtargetInfo {
protected:
   bool EnableOverflow;
public:
  // This constructor initializes the data members to match that
  // of the specified triple.
  Cpu0Subtarget(const Triple &TargetTriple, StringRef Cpu,
                 StringRef FeatureString, const TargetMachine &TM,
                 const TargetOptions &Options, CodeModel::Model CodeModel,
                 CodeGenOpt::Level OptLevel);

  // ParseSubtargetFeatures - Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  Cpu0Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

  void initSubtargetFeatures(StringRef CPU, StringRef FS);

  bool enableMachineScheduler() const override { return true; }

  const Cpu0InstrInfo *getInstrInfo() const override { return &InstrInfo; }

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

 /* const Cpu0RegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }*/
//~Cpu0Subtarget();	

private:
  Cpu0FrameLowering FrameLowering;
  Cpu0InstrInfo InstrInfo;
  //Cpu0TargetLowering TLInfo;
  //Cpu0SelectionDAGInfo TSInfo;
};
} // namespace llvm

#endif  
